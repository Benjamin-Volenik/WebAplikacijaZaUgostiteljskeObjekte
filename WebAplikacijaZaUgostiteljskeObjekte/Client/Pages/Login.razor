@page "/login"
@using WebAplikacijaZaUgostiteljskeObjekte.Shared
@using System.ComponentModel.DataAnnotations

@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject ISnackbar Snackbar

<h3 class="p-4 d-flex justify-content-center">Prijava</h3>

<div class="container-fluid">
   <div class="d-flex justify-content-center">
        <form class="col-xs-8 col-xs-offset-2  col-sm-6 col-sm-offset-3 col-md-4 col-sm-offset-4 col-lg-2 col-lg-offset-5">
            <EditForm Model="user" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <!-- Email input -->
                  <div class="form-outline mb-4">
                    <MudTextField id="email" @bind-Value="user.Email" Label="Email" Variant="Variant.Outlined" For="@(() => user.Email)"></MudTextField>
                  </div>

                  <!-- Password input -->
                  <div class="form-outline mb-4">
                        <MudTextField id="password" @bind-Value="user.Password" InputType="InputType.Password" Label="Lozinka" Variant="Variant.Outlined" For="@(() => user.Password)" />
                  </div>


                  <!-- Submit button -->
                  <MudButton  ButtonType="ButtonType.Submit" Class="d-block ml-auto mr-auto" Variant="Variant.Filled" Color="Color.Primary">Prijava</MudButton>

                  <!-- Register buttons -->
                  <div class="text-center mt-4">
                    <p>Nemate korisnički račun? <MudLink Href="registration">Registracija</MudLink></p>
                  </div>
            </EditForm>
        </form>
   </div>
</div>

@code {
    private UserModel user = new UserModel();

    public List<UserModel> Users { get; set; } = new();

    public List<UgostiteljskiObjektiModel> UgostiteljskiObjekti { get; set; } = new();

    public List<AdminModel> Admin { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Users = await Http.GetFromJsonAsync<List<UserModel>>("api/User");
        UgostiteljskiObjekti = await Http.GetFromJsonAsync<List<UgostiteljskiObjektiModel>>("api/UgostiteljskiObjekti");
        Admin = await Http.GetFromJsonAsync<List<AdminModel>>("api/Admin");
    }

    private async void HandleLogin()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if(user.Password == Users.FirstOrDefault(u => u.Email == user.Email)?.Password)
        {
            await LocalStorage.SetItemAsync<string>("email",user.Email);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
            Snackbar.Add("Uspješno ste se prijavili!",Severity.Success);
        }
        else if(user.Password == UgostiteljskiObjekti.FirstOrDefault(uo => uo.UgostiteljskiObjektiEmali == user.Email)?.UgostiteljskiObjektiLozinka)
        {
            await LocalStorage.SetItemAsync<string>("email",user.Email);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
            Snackbar.Add("Uspješno ste se prijavili!",Severity.Success);
        }
        else if(user.Password == Admin.FirstOrDefault(a => a.Email == user.Email)?.Password)
        {
            await LocalStorage.SetItemAsync<string>("email",user.Email);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/");
            Snackbar.Add("Uspješno ste se prijavili!",Severity.Success);
        }
        else
        {
            Snackbar.Add("Uneseni podatci nisu točni");
            user = new UserModel();
        }

    }

}
