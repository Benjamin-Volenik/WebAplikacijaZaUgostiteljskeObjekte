@page "/registrationadmin"

@using System.Net.Http.Json
@using System.Net.Mail
@using WebAplikacijaZaUgostiteljskeObjekte.Shared
@inject HttpClient Http
@inject ISnackbar snackbar
@inject ISyncLocalStorageService localStorage
@inject IJSRuntime JsRuntime
@inject IDialogService DialogService

<MudText Class="d-flex justify-content-center align-items-center pa-4" Typo="Typo.h3">Registracije ugostiteljskih objekata</MudText>

<div class="pa-4 mt-5">
    <MudTable Items="@values" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>OIB ugostiteljskog objekta</MudTh>
            <MudTh>Vlasnik</MudTh>
            <MudTh>Adresa</MudTh>
            <MudTh>Naziv</MudTh>
            <MudTh>Tip</MudTh>
            <MudTh>Kontakt</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Latituda</MudTh>
            <MudTh>Longituda</MudTh>
            <MudTh>PDF ugostiteljskog objekta</MudTh>
            <MudTh>Status registracije</MudTh>
            <MudTh>Odobri registraciju</MudTh>
            <MudTh>Poništi registraciju</MudTh>
            <MudTh>Prikaži izgled stranice</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="OIB ugostiteljskog objekta">@context.UgostiteljskiObjektiOIB</MudTd>
            <MudTd DataLabel="Vlasnik ugostiteljskog objekta">@context.UgostiteljskiObjektiVlasnik</MudTd>
            <MudTd DataLabel="Adresa">@(context.UgostiteljskiObjektiUlica + " " + context.UgostiteljskiObjektiKucniBroj + " , " + context.UgostiteljskiObjektiGrad)</MudTd>
            <MudTd DataLabel="Naziv ugostiteljskog objekta">@context.UgostiteljskiObjektiNaziv</MudTd>
            <MudTd DataLabel="Tip ugostiteljskog objekta">@context.UgostiteljskiObjektiTip</MudTd>
            <MudTd DataLabel="Kontakt">@context.UgostiteljskiObjektiKontakt</MudTd>
            <MudTd DataLabel="Email ugostiteljskog objekta">@context.UgostiteljskiObjektiEmali</MudTd>
            <MudTd DataLabel="Latituda">@context.UgostiteljskiObjektiLatituda</MudTd>
            <MudTd DataLabel="Longituda">@context.UgostiteljskiObjektiLongituda</MudTd>
            <MudTd DataLabel="PDF ugostiteljskog objekta"><MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@context.UgostiteljskiObjektiPdfPutanja" target="_blank">Otvori PDF</MudButton></MudTd>
            <MudTd DataLabel="Status registracije">@context.UgostiteljskiObjektiStanje</MudTd>
            <MudTd DataLabel="Odobri registraciju"><MudButton @onclick="() => UpdateStanje(context.UgostiteljskiObjektiId)" Variant="Variant.Filled" Color="Color.Success"><MudIcon Icon="@Icons.Filled.CheckCircle" /></MudButton></MudTd>
            <MudTd DataLabel="Poništi registraciju"><MudButton @onclick="() => PonistiRegistraciju(context)" Variant="Variant.Filled" Color="Color.Error"><MudIcon Icon="@Icons.Filled.Delete" /></MudButton></MudTd>
            <MudTd DataLabel="Prikaži izgled stranice"><MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/ugostiteljskiobjekti/{context.UgostiteljskiObjektiId}")">Prikaži</MudButton></MudTd>

        </RowTemplate>
    </MudTable>
</div>

@code {

    public List<UgostiteljskiObjektiModel> ugostiteljskiObjekti { get; set; } = new();
    public List<UgostiteljskiObjektiModel> values = new();
    public UgostiteljskiObjektiModel uredjeniUO { get; set; } = new();
    public List<AdminModel> Admini { get; set; } = new();
    public UgostiteljskiObjektiModel UgostiteljskiObjektMail { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ugostiteljskiObjekti = await Http.GetFromJsonAsync<List<UgostiteljskiObjektiModel>>("api/UgostiteljskiObjekti");

        values = ugostiteljskiObjekti.FindAll(u => u.UgostiteljskiObjektiStanje == "Neodobreno");
    }

    public async Task UpdateStanje(int id)
    {
        uredjeniUO = ugostiteljskiObjekti.FirstOrDefault(uo => uo.UgostiteljskiObjektiId == id);
        uredjeniUO.UgostiteljskiObjektiStanje = "Odobreno";
        await Http.PutAsJsonAsync("api/UgostiteljskiObjekti", uredjeniUO);
        values = ugostiteljskiObjekti.FindAll(u => u.UgostiteljskiObjektiStanje == "Neodobreno");
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        snackbar.Add("Registracija ugostiteljskog objekta " + uredjeniUO.UgostiteljskiObjektiNaziv + " je odobrena!");
        string toEmailAddress = uredjeniUO.UgostiteljskiObjektiEmali;
        string subject = "Registracija WAZPUO";
        string body = "Poštovani, Vaša registracija je prihvaćena.";

        JsRuntime.InvokeAsync<object>("blazorExtensionss.SendLocalEmailPotvrda",
        new object[] { toEmailAddress, subject, body });
    }

    public async Task PonistiRegistraciju(UgostiteljskiObjektiModel ugostiteljskiObjekt)
    {

        UgostiteljskiObjektMail = ugostiteljskiObjekt;
        await Http.DeleteAsync($"api/UgostiteljskiObjekti/{ugostiteljskiObjekt.UgostiteljskiObjektiId}");
        ugostiteljskiObjekti.Remove(ugostiteljskiObjekt);
        values = ugostiteljskiObjekti.FindAll(u => u.UgostiteljskiObjektiStanje == "Neodobreno");
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        snackbar.Add("Registracija ugostiteljskog objekta " + ugostiteljskiObjekt.UgostiteljskiObjektiNaziv + " nije odobrena!");
        OpenDialog();

    }

    private void OpenDialog()
    {

        DialogService.Show<RegistrationAdminDialog>("Razlog poništavanja registracije", new DialogParameters
        {
            ["UgostiteljskiObjektMail"] = UgostiteljskiObjektMail
        });
    }

}
